//
// Common Lisp in C++17
//
// Copyright Â© Alex Kowalenko 2019.
//

#include "lisp.hh"

#include <iostream>
#include <sstream>

#include "evaluator.hh"
#include "exceptions.hh"

#include "parser.hh"
#include "primitive.hh"
#include "symboltable.hh"

namespace ax {

const char *compile_date = __DATE__;
const char *compile_time = __TIME__;

class NullBuffer : public std::streambuf {
  public:
    int overflow(int c) { return c; }
};

Lisp::Lisp(Options &o) : opt(o), trace_functions() {
    symboltable = mk_symbol_table();
}

// Standard library is a file file that is generated by cmake
inline const std::string stdlib =
#include "stdlib.lisp.hh"
    ;

void Lisp::init() {
    if (!opt.silent) {
        std::cout << "Hello C++ Lisp ðŸ‘¾ (" << compile_date << ' ' << compile_time << ")!"
                  << std::endl;
    }
    init_prims();

    // Init the standard library
    std::istringstream in(stdlib);
    NullBuffer         null_buffer;
    std::ostream       out(&null_buffer);
    opt.push_options();
    opt.readline = false;
    opt.debug_expr = false;
    repl(in, out);
    opt.pop_options();

    symboltable->put("*standard-output*", mk_stream(&std::cout));
    symboltable->put("*standard-input*", mk_stream(&std::cin));
    symboltable->put("*error-output*", mk_stream(&std::cerr));
};

void Lisp::repl(std::istream &istr, std::ostream &ostr) {
    Evaluator evaluator(opt, symboltable, trace_functions);
    evaluator.repl(istr, ostr);
}

void Lisp::terminate() {
    if (!opt.silent) {
        std::cout << "\nBye ðŸ‘¾" << std::endl;
    }
};

} // namespace ax